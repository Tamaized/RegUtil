plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

repositories {
    maven {
        name 'Jared\'s Maven' // JEI
        url 'https://maven.blamejared.com/'
    }
}

version = "${minecraft_version}-${mod_major_version}." + (hasProperty("CIVersion") ? CIVersion : mod_version)
group = "tamaized.regutil"
base {
    archivesName = "RegUtil"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation" << "-Werror"

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
    secretsFile.withInputStream {
        stream -> secrets.load(stream)
    }

    fileTree("secrets").matching {
        include "**/*.properties"
    }.each {
        File file ->
            file.withInputStream {
                stream -> secrets.load(stream)
            }
    }
}

minecraft {
    mappings channel: project.mapping_type, version: project.mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    def mod_id = 'regutil'
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            taskName "Minecraft_Client_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--username', secrets.getProperty("username")?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid")?: ''
        }

        server {
            taskName "Minecraft_Server_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            taskName "Minecraft_GameTestServer_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            taskName "Minecraft_Data_${project.minecraft_version}"
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    filesMatching("META-INF/mods.toml") {
        expand([
                'version': "${project.version}"
        ])
    }
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes("FMLModType" : "GAMELIBRARY",
                    "Specification-Title" : "RegUtil",
                    "Specification-Vendor" : "Tamaized",
                    "Specification-Version" : "${version}",
                    "Implementation-Title" : project.name,
                    "Implementation-Version" : "${version}",
                    "Implementation-Vendor" : "Tamaized",
                    "Implementation-Timestamp" : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"))
    }
}

dependencies {
    minecraft "net.neoforged:forge:${project.minecraft_version}-${project.forge_version}"

    runtimeOnly fg.deobf("mezz.jei:${project.jei_version}")
}

jar.finalizedBy('reobfJar')

def mavenUser = hasProperty("CIMUser") ? CIMUser : secrets.getProperty("maven_username")
def mavenToken = hasProperty("CIMToken") ? CIMToken : secrets.getProperty("maven_password")

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                artifact project.jar
                artifact project.sourceJar
            }
            setGroupId 'tamaized'
            setArtifactId 'regutil'
        }
    }
    repositories {
        maven {
            url "https://maven.tamaized.com/releases"
            credentials {
                username mavenUser
                password mavenToken
            }
        }
    }
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

task incrBuildNum doLast {
    ant.propertyfile(file: "gradle.properties") {
        entry(key: "mod_version", value: Integer.parseInt(project.mod_version) + 1)
    }
}

build.finalizedBy(incrBuildNum)
